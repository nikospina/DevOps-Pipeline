trigger:
- develop
- release/*

variables:
  buildConfiguration: 'Release'
  
stages:
- stage: 'Build'
  displayName: 'Build the web application'
  jobs: 
  - job: 'Build'
    displayName: 'Build job'
    pool:
      vmImage: 'ubuntu-16.04'
      demands:
       - npm
    variables:
      wwwrootDir: 'wwwroot'
      
    steps:
    - script: echo build
        
  - job: 'RunUnitTest'
    displayName: 'Unit Test & Coverage Job'    
    steps:
    - script: echo unit test

- stage: 'DeployDev'
  displayName: 'Deploy Dev'
  jobs: 
  - deployment: 'DeployDev'
    displayName: 'Deploy Dev'
    environment: 'Desarrollo'
    condition: |
      and(
      succeeded(),
      ne(variables['Build.Reason'], 'PullRequest'),
      eq(variables['Build.SourceBranchName'], 'develop')
      )
    strategy:
      runOnce:
        deploy:
          steps:
          - script: echo Deploy in Develop environment

- stage: 'DeployQa'
  displayName: 'Deploy Qa'
  jobs: 
  - deployment: 'DeployQa'
    displayName: 'Deploy Qa Env'
    environment: 'Calidad'
    condition: |
      and(
      succeeded(),
      ne(variables['Build.Reason'], 'PullRequest'),
      startsWith(variables['Build.SourceBranch'], 'refs/heads/release')
      )
    strategy:
      runOnce:
        deploy:
          steps:
          - script: echo Deploy in Qa environment

- stage: 'FunctionalTest'
  displayName: 'Functional Testing'
  condition: |
      and(
      succeeded(),
      ne(variables['Build.Reason'], 'PullRequest'),
      startsWith(variables['Build.SourceBranch'], 'refs/heads/release')
      )
  jobs:
  - job: 'RunFunctionalTest'
    displayName: 'Functional test & verify Quality Gates'    
    steps:
    - script: echo functional test
    - script: echo Verify Quality Gates

- stage: 'DeployPrd'
  displayName: 'Deploy Prd'
  jobs:
  - deployment: 'DeployPrd'
    displayName: 'Deploy Prd Env Job'
    environment: 'Produccion'
    condition: |
      and(
      succeeded(),
      ne(variables['Build.Reason'], 'PullRequest'),
      startsWith(variables['Build.SourceBranch'], 'refs/heads/release')
      )
    strategy:
      runOnce:
        deploy:
          steps:
          - script: echo Deploy in Prd environment

- stage: 'UpdateMaster'
  displayName: 'Update master'
  jobs:
  - job: 'MergeRelease'
    displayName: 'Merge release in master'    
    steps:
    - script: |
        git config --global user.email "azure@pipelines.com"
        git config --global user.name "Azure Pipelines"
        git pull origin
        git checkout main
        git merge --squash release/$(Build.SourceBranchName)
        git commit -m 'Squash Merge release $(Build.SourceBranchName)'
        git tag $(Build.SourceBranchName) -m 'Tag by Azure Pipeline'
        git push
